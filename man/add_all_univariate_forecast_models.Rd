% Generated by roxygen2: do not edit by hand
% Please edit documentation in
%   R/INTRA_FORECAST_add_all_univariate_forecast_models.R
\name{add_all_univariate_forecast_models}
\alias{add_all_univariate_forecast_models}
\title{Add all univariate forecast models}
\usage{
add_all_univariate_forecast_models(
  ts_object_train,
  fc_models = list(),
  periods_ahead = 1,
  periods_history = Inf,
  fc_methods = supported_fc_methods_uni_var(),
  verbose = FALSE,
  parallel = FALSE
)
}
\arguments{
\item{ts_object_train}{A time series object, which contains only the training
data.}

\item{fc_models}{A named list of forecast models, with for each forecast 
model a list with the model itself and a table with forecast values.}

\item{periods_ahead}{A positive integer value indicating the number of
periods to forecast ahead.}

\item{periods_history}{A positive integer value indicating the number of
historic datapoints to use for training, which is only relevant for
specific forecast methods such as drift and mean.}

\item{fc_methods}{A character vector specifying the forecast methods to add. 
For more info \code{`?supported_fc_methods`}.}

\item{verbose}{Boolean, which is set to TRUE if status updates are valued, or
set to FALSE if they are not.}
}
\value{
A named list of forecast models, with for each forecast model a list 
  with the model itself and a table with forecast values.
}
\description{
\code{add_all_univariate_forecast_models} is a wrapper function to add 
multiple univariate forecast models to a (named) list of forecast models. The
forecast models are created based on multiple calls of the 
\code{add_univariate_forecast_model} function with specific sets of 
parameters, which are each used to forecast a specific number of periods 
ahead. The fc_methods parameter can be used to control which forecast models 
are added.
}
\examples{
ts_object_train <- tstools::initialize_ts_forecast_data(
      data = dummy_gasprice,
      date_col = "year_month", 
      col_of_interest = "gasprice", 
      group_cols = c("state", "oil_company"), 
      xreg_cols = c("spotprice", "gemprice")
   ) \%>\% 
   dplyr::filter(grouping == "state = New York   &   oil_company = CompanyA") \%>\% 
   tstools::transform_data_to_ts_object()
fc_models <- add_all_univariate_forecast_models(
   ts_object_train = ts_object_train,
   periods_ahead = 12,
   verbose = T
)
}
